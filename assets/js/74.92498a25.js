(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{800:function(e,t,s){"use strict";s.r(t);var a=s(1),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"date-rolling-file-appender"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#date-rolling-file-appender"}},[e._v("#")]),e._v(" Date Rolling File Appender")]),e._v(" "),s("p",[e._v("This is a file appender that rolls log files based on a configurable time, rather than the file size. When using the date file appender, you should also call "),s("RouterLink",{attrs:{to:"/getting-started.html"}},[e._v("logger.shutdown()")]),e._v(" when your application terminates, to ensure that any remaining asynchronous writes have finished. Although the date file appender uses the "),s("a",{attrs:{href:"https://github.com/nomiddlename/streamroller",target:"_blank",rel:"noopener noreferrer"}},[e._v("streamroller"),s("OutboundLink")],1),e._v(" library, this is included as a dependency of log4js so you do not need to include it yourself.")],1),e._v(" "),s("h2",{attrs:{id:"configuration"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[e._v("#")]),e._v(" Configuration")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("type")]),e._v(" - "),s("code",[e._v("file")])]),e._v(" "),s("li",[s("strong",[e._v("filename")]),e._v(" - "),s("code",[e._v("string")]),e._v(" - the path of the file where you want your logs written.")]),e._v(" "),s("li",[s("strong",[e._v("pattern")]),e._v(" - "),s("code",[e._v("string")]),e._v(" (optional, defaults to "),s("code",[e._v(".yyyy-MM-dd")]),e._v(") - the pattern to use to determine when to roll the logs.")]),e._v(" "),s("li",[s("strong",[e._v("layout")]),e._v(" - (optional, defaults to basic layout) - see "),s("RouterLink",{attrs:{to:"/layouts.html"}},[e._v("layouts")])],1)]),e._v(" "),s("p",[e._v("Any other configuration parameters will be passed to the underlying "),s("a",{attrs:{href:"https://github.com/nomiddlename/streamroller",target:"_blank",rel:"noopener noreferrer"}},[e._v("streamroller"),s("OutboundLink")],1),e._v(" implementation (see also node.js core file streams):")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("encoding")]),e._v(" - "),s("code",[e._v("string")]),e._v(' (default "utf-8")')]),e._v(" "),s("li",[s("strong",[e._v("mode")]),e._v("- "),s("code",[e._v("integer")]),e._v(" (default 0o644 - "),s("a",{attrs:{href:"https://nodejs.org/dist/latest-v12.x/docs/api/fs.html#fs_file_modes",target:"_blank",rel:"noopener noreferrer"}},[e._v("node.js file modes"),s("OutboundLink")],1),e._v(")")]),e._v(" "),s("li",[s("strong",[e._v("flags")]),e._v(" - "),s("code",[e._v("string")]),e._v(" (default 'a')")]),e._v(" "),s("li",[s("strong",[e._v("compress")]),e._v(" - "),s("code",[e._v("boolean")]),e._v(" (default false) - compress the backup files during rolling (backup files will have "),s("code",[e._v(".gz")]),e._v(" extension)")]),e._v(" "),s("li",[s("strong",[e._v("alwaysIncludePattern")]),e._v(" - "),s("code",[e._v("boolean")]),e._v(" (default false) - include the pattern in the name of the current log file as well as the backups.")]),e._v(" "),s("li",[s("strong",[e._v("daysToKeep")]),e._v(" - "),s("code",[e._v("integer")]),e._v(" (default 0) - if this value is greater than zero, then files older than that many days will be deleted during log rolling.")]),e._v(" "),s("li",[s("strong",[e._v("keepFileExt")]),e._v(" - "),s("code",[e._v("boolean")]),e._v(" (default false) - preserve the file extension when rotating log files ("),s("code",[e._v("file.log")]),e._v(" becomes "),s("code",[e._v("file.2017-05-30.log")]),e._v(" instead of "),s("code",[e._v("file.log.2017-05-30")]),e._v(").")])]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("pattern")]),e._v(" is used to determine when the current log file should be renamed and a new log file created. For example, with a filename of 'cheese.log', and the default pattern of "),s("code",[e._v(".yyyy-MM-dd")]),e._v(" - on startup this will result in a file called "),s("code",[e._v("cheese.log")]),e._v(" being created and written to until the next write after midnight. When this happens, "),s("code",[e._v("cheese.log")]),e._v(" will be renamed to "),s("code",[e._v("cheese.log.2017-04-30")]),e._v(" and a new "),s("code",[e._v("cheese.log")]),e._v(" file created. The appender uses the "),s("a",{attrs:{href:"https://github.com/nomiddlename/date-format",target:"_blank",rel:"noopener noreferrer"}},[e._v("date-format"),s("OutboundLink")],1),e._v(" library to parse the "),s("code",[e._v("pattern")]),e._v(", and any of the valid formats can be used. Also note that there is no timer controlling the log rolling - changes in the pattern are determined on every log write. If no writes occur, then no log rolling will happen. If your application logs infrequently this could result in no log file being written for a particular time period.")]),e._v(" "),s("h2",{attrs:{id:"example-default-daily-log-rolling"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example-default-daily-log-rolling"}},[e._v("#")]),e._v(" Example (default daily log rolling)")]),e._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("Logger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"@tsed/logger"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" logger "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Logger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"loggerName"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\nlogger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("appenders"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"everything"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  type"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"file"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  filename"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"all-the-logs.log"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  pattern"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('".yyyy-MM-dd"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\nlogger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("debug")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"I will be logged in all-the-logs.log"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("p",[e._v("This example will result in files being rolled every day. The initial file will be "),s("code",[e._v("all-the-logs.log")]),e._v(", with the daily backups being "),s("code",[e._v("all-the-logs.log.2017-04-30")]),e._v(", etc.")]),e._v(" "),s("h2",{attrs:{id:"example-with-hourly-log-rolling-and-compressed-backups"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example-with-hourly-log-rolling-and-compressed-backups"}},[e._v("#")]),e._v(" Example with hourly log rolling (and compressed backups)")]),e._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("Logger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"@tsed/logger"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" logger "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Logger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"loggerName"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\nlogger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("appenders"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"everything"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  type"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"file"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  filename"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"all-the-logs.log"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  pattern"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('".yyyy-MM-dd-hh"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  compress"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[e._v("This will result in one current log file ("),s("code",[e._v("all-the-logs.log")]),e._v("). Every hour this file will be compressed and renamed to "),s("code",[e._v("all-the-logs.log.2017-04-30-08.gz")]),e._v(" (for example) and a new "),s("code",[e._v("all-the-logs.log")]),e._v(" created.")])])}),[],!1,null,null,null);t.default=n.exports}}]);